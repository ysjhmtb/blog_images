Hardkernel : inter 98 page, http://com.odroid.com/sigong/blog/blog_list.php?bid=119 (exynos4210 pdf 에 포함된 예제 소스)

analysis code : personal/worker/android or kernel.

Binder : 
Art 에서 자바 class 파일 동작 중, jni 를 통해서 c/c++ 코드로 동작되는 경우 반드시 binder 를 해야 함.

dts analysis :
http://slowbootkernelhacks.blogspot.kr/2014/03/beaglebone-linux-kernel310x-programming.html
http://blog.naver.com/PostView.nhn?blogId=ham9627&logNo=220565656620&categoryNo=30&parentCategoryNo=0&viewDate=&currentPage=1&postListTopCurrentPage=1&from=search
http://jake.dothome.co.kr/dtb-of-api/
http://en.t-firefly.com/doc/product/index/id/6.html (Diverse Examples)

dts file parsing function :
http://jake.dothome.co.kr/dtb-of-api/
https://github.com/arter97/android_kernel_nvidia_shieldtablet/tree/master/Documentation/devicetree/bindings/pwm
http://elixir.free-electrons.com/linux/latest/source/Documentation/devicetree/bindings/pwm/pwm.txt
for fireprime dts analysis : 
http://wiki.t-firefly.com/index.php/FirePrime/DSI
http://wiki.t-firefly.com/index.php/FirePrime/GPIO

sysfs : 
http://blog.naver.com/PostView.nhn?blogId=baramsori72&logNo=120046812932
http://infoarts.tistory.com/21

ex) gps_onoff 을 보면,
android/device/tenergy/hex200/conf/gps_on.sh => android/device/tenergy/hex200/device.mk 에서 실행.
kernel/arch/arm/match_exynos/achro4210-sysfs.c

Android init procedure : 
http://www.eastsky.co.kr/Android_Board/4982
http://egloos.zum.com/jmanbal/v/1044496
init은 /system/core/init 디렉토리에 관련 소스가 있다. init.rc 파일은 /system/core/rootdir/에 있다.
init.rc가 안드로이드에서 기본적으로수행해야할 서비스들을 정리한다고 하면 init.xxx.rc에는 하드웨어 의존적인 초기화 과정을 만들어 두어야 한다.
http://com.odroid.com/sigong/nf_board/nboard_view.php?brd_id=odroida&kind=&bid=262
device/hardkernel/odroida/conf/ 안에있는 init.rc를 수정.

init grammer,
http://www.dreamy.pe.kr/zbxe/CodeClip/164851
http://egloos.zum.com/taehyo/v/4129642

mcp251x porting :
https://elinux.org/Bringing_CAN_interface_up
http://www.armadeus.org/wiki/index.php?title=CAN_bus_Linux_driver
https://elinux.org/RPi_CANBus
https://www.kernel.org/doc/Documentation/networking/can.txt

mk file analysis :
http://itmir.tistory.com/222
https://developer.android.com/ndk/guides/android_mk.html?hl=ko
device.mk는 필요한 파일을 out/tatget/product/(기기명)으로 이동시켜 주는 역할을 합니다 (복사 명령어)
http://itmir.tistory.com/222

system/etc folder analysis :
http://openwiki.kr/tech/%EB%A6%AC%EB%88%85%EC%8A%A4_etc_%ED%8F%B4%EB%8D%94_%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0

cyanogenmod :
http://cafe.naver.com/minecraftpe/1295532

zimage & uimage :
http://chammoru.egloos.com/v/4248549

initrd.img :
안드로이드에서는 ramdisk.img가 initrd.img에 해당합니다.
http://egloos.zum.com/chammoru/v/3812591
http://com.odroid.com/sigong/nf_board/nboard_view.php?brd_id=odroidx&bid=1959
http://blog.naver.com/PostView.nhn?blogId=memy80&logNo=100119005365

mkinitrd :
http://blog.chonnom.com/10105257100
http://icecreamie.tistory.com/13

init.xxxx.rc modification :
http://com.odroid.com/sigong/nf_board/nboard_view.php?brd_id=odroidu2&kind=&bid=5514

Kernel Module parameter :
http://hooneyo.tistory.com/entry/%EB%AA%A8%EB%93%88-%EB%A7%A4%EA%B0%9C%EB%B3%80%EC%88%98

MTD & FTL :
http://blog.naver.com/PostView.nhn?blogId=manhwamani&logNo=10189498137&parentCategoryNo=&categoryNo=31&viewDate=&isShowPopularPosts=true&from=search
http://www.ahnlab.com/kr/site/securityinfo/secunews/secuNewsView.do?seq=20934
FTL은 Flash devcie 를 block device처럼 보이도록 변환해주는 Layer로 이를 통해서 기존의 block device용으로 개발된 파일 시스템을 변경없이 flash memroy위에서 사용할 수 있게 되었다

root file system creation :
http://egloos.zum.com/mokuzin21/v/2377984
http://blog.naver.com/cjm9236/60198915025
http://sangjjang.tistory.com/144

gpio control example in application :
http://blog.csdn.net/huangkaiyue1/article/details/51599069 (with dts file),
http://forum.falinux.com/zbxe/?mid=lecture_tip&l=ru&page=7&m=1&listStyle=list&document_srl=832795

i2c control example in application :
리눅스 커널은 I2C 버스를 다루기 위해서 두 가지 개념을 두고 있다. 하나는 어댑터(adapter)라는 개념과 다른 하나는 알고리즘(algorithm)이라는 개념이다. 
여기서 말하는 어댑터라는 것은 우리가 알고 있는 개념과 달리 i2c 버스를 커널 내부에서 관리하기 위한 정보 관리 구조체로 보면 된다. 
그렇다면 알고리즘이라는 것은 어떤 것일까? 
알고리즘은 이름만 보면 논리적인 구현 방법을 생각하는데 실제로는 하드웨어상에서 I2C 버스를 제어하는 방법에 대한 구체적인 프로그램 코드가 들어간다. 
즉 어댑터는 커널 내부의 정보 구조체이고 알고리즘은 실제 버스를 제어하는 루틴을 다루는 것이다. 
여기서 기억해둬야 할 것은 어댑터 구조체 내에 알고리즘 구조체를 포함하고 있다는 것이다.

응용 프로그램이 /dev/i2c-0 디바이스 파일을 열고서 read, write, ioctl 함수를 호출하면 i2c-dev 디바이스 드라이버는 read에 대응하여 i2c_master_recv 함수를, 
write에 대응하여 i2c_master_send를, ioctl 함수를 호출하면 i2c_transfer 함수를 호출한다. 
i2c-dev에서 호출하는 i2c_master_send, i2c_master_recv, i2c_transfer 함수들은 i2c-dev에 연결된 i2c 어댑터 구조체를 참조하고, 
이 구조체에 포함된 i2c 알고리즘 구조체에 정의되어 있는 master_xfer라는 함수를 호출한다. 
이 master_xfer는 하드웨어 구조에 맞게 프로그램된 실제적인 I2C 버스 제어 코드가 존재하게 된다.
http://mauver.kr/wp/archives/220
http://slowbootkernelhacks.blogspot.kr/2014/03/device-tree-i2c-programming.html
http://odroid.com/dokuwiki/doku.php?id=en:xu3_weather_board
https://github.com/shenki/linux-i2c-example/blob/master/i2c_example.c

i2c usage example in android app :
https://github.com/digi-embedded/android-sample-i2c

i2c device node creation example in dts :
http://anslasax.blog.me/221063470193
https://www.jann.cc/_downloads/iMX233-OLinuXino:%20Current%20State.pdf ==> 12 page, see how to add i2c device node with dtsi file,

spi control example in application :
https://raw.githubusercontent.com/raspberrypi/linux/rpi-3.10.y/Documentation/spi/spidev_test.c

sysfs function :
http://egloos.zum.com/ohpeng/v/5608460

uboot config file setting : 기존에는 board.cfg 사용. 현재는 Kconfig 방식 사용함.
http://blog.daum.net/minzzang0879/67
http://jhkim3624.tistory.com/83
http://forum.falinux.com/zbxe/index.php?document_srl=828720&mid=lecture_tip
http://chlrbgh0.tistory.com/entry/2-%EC%9E%84%EB%B2%A0%EB%94%94%EB%93%9C-%EB%A6%AC%EB%88%85%EC%8A%A4-%EC%8B%9C%EC%9E%91%EC%9D%80-Bootloader%EB%A7%90%EA%B3%A0-%EA%B5%AC%EC%A1%B0-%ED%8C%8C%EC%95%85%EB%B6%80%ED%84%B0

timer example in kernel :
http://xenostudy.tistory.com/306
http://julrams.tistory.com/4

pwm control example in application :
http://forum.falinux.com/zbxe/?mid=device_driver&order_type=desc&sort_index=readed_count&document_srl=866087

Major/Minor/Miscellaneous Number :
http://damduc.tistory.com/171
https://m.blog.naver.com/PostView.nhn?blogId=luis8282&logNo=20086278418&proxyReferer=https%3A%2F%2Fwww.google.co.kr%2F
http://lbj90.blogspot.kr/2015/02/device-driver.html
Misc 드라이버는 별도의 작성 없이도 자동으로 sys/class/misc 밑에 노드를 생성해 줌. misc 는 char 드라이버이고 char 드라이버의 진입 지점을 misc drivers 를 위해 유지해 줌.
char 드라이버 인 경우, major/minor 번호를 할당 후, /dev 와 /sys 밑에 class_device_create() 함수로 노드 생성 함. (이 과정을 misc 는 misc_register() 로 자동으로 진행).
모든 misc 장치는 major 번호로 10을 할당 받음. 각각 minor 번호 선택 가능.

Interrupt handler with kernel version :
http://jake.dothome.co.kr/two-part-interrupt-handler/

work queue example : exynos4210intermediateRev10.pdf 의 134 page 참조.
https://jlmedina123.wordpress.com/2016/05/18/workqueue/
softirq나 tasklet들이 실행중에는 sw인터럽트중이라, hw 인터럽트는 가능하지만, 여전히 sw적으로 우선적으로 처리되는것들입니다. 
즉 softirq중에는 user process들이나, context switch등은 처리되지 않고 있겠죠. 모든 sw irq를 softirq로만 처리한다면 
user process나 context switch등은 처리안되어 유저입장에선 상당히 반응성이 안좋은 커널이라 생각할수 있습니다. 
그래서 context switch등과 동일한 level에서 스케쥴링되는 work queue를 두어 sw interrupt들이지만 상당히 시간을 요하거나 계산해야될게 
많은 작업들 혹은 휴면이 필요한 I/O작업이 필요한 일들은 context switch될때 같이 되게 만들어 주어 커널 응답성을 좋게 해줄수 있습니다.

synchronization method in kernel :
http://brownbears.tistory.com/45
http://tuxthink.blogspot.kr/2013/06/using-spinlock-in-linux-example.html (SPIN LOCK Example),

Signal :
http://jangpd007.tistory.com/90
https://www.joinc.co.kr/w/man/2/alarm
http://joshua.tistory.com/68

Hardware_Hacking :
https://github.com/tinyclub/elinux/tree/master/en/dev_portals/Hardware_Hacking

timer usage in kernel :
http://hbisland.tistory.com/entry/kernel-%EC%8B%9C%EA%B0%84%EA%B4%80%EB%A6%AC
https://www.cs.bham.ac.uk/~exr/lectures/opsys/12_13/examples/kernelProgramming/kernel/myTimer.c

리눅스 파일/디렉토리 구조 파헤치기 :
http://coffeenix.net/doc/kuls/file_system-4.html

thread in kernel & application(user mode) :
http://timewizhan.tistory.com/entry/%EC%BB%A4%EB%84%90-%EC%8A%A4%EB%A0%88%EB%93%9C%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%BC%EA%B9%8C-1
POSIX 상에서는 유저 레벨에서 스레드를 사용하기 위해서는 pthread_create라는 함수명을 사용한다. 하지만 커널 스레드는 kernel_thread(정말 이름 그대로..)라는 함수명을 사용한다
https://www.joinc.co.kr/w/Site/system_programing/Book_LSP/ch07_Thread
http://poplinux.tistory.com/123

i2c device register method in kernel : exynos4210intermediateRev10.pdf 의 127 page 참조
http://egloos.zum.com/furmuwon/v/10928235
http://beginlinux.blogspot.kr/2013/11/linux-kernel-i2c-client-driver.html

Android ueventd.rc parsing & mknod(device node creation procedure) :
http://blog.naver.com/PostView.nhn?blogId=rosaria1113&logNo=200747949&redirect=Dlog&widgetTypeCall=true
https://kshokd.wordpress.com/2012/08/29/init-%EA%B3%BC%EC%A0%95%EC%97%90%EC%84%9C-uevent%EC%99%80-ueventd%EC%9D%98-%ED%99%9C%EC%9A%A9/

Keypad event :
http://lapan.tistory.com/21

GPIO Concept & Expander :
http://talkingaboutme.tistory.com/759
http://blog.naver.com/PostView.nhn?blogId=specialist0&logNo=220704124150&parentCategoryNo=&categoryNo=&viewDate=&isShowPopularPosts=false&from=postView
https://github.com/ControlEverythingCommunity/PCF8574
https://www.nxp.com/docs/en/data-sheet/PCF8574_PCF8574A.pdf
http://dohwa.tistory.com/entry/I2C
http://rakuraku.tistory.com/148
http://mystyle1057.tistory.com/51

Linux Input Event Driver Example :
http://chocokeki.tistory.com/752 

